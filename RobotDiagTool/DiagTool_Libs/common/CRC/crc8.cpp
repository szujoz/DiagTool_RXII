/*
 * crc8.c
 *
 *  Created on: 25 mar 2017
 *      Author: osannolik
 */

#include "crc8.h"

/* For information and crc-tables, see
 * - http://reveng.sourceforge.net/crc-catalogue/all.htm
 * - https://github.com/madler/crcany
 */

#if (CRC8_USED_POLY == CRC8_8)
/* width=8 poly=0x07
 * init=0x00
 * refin=false
 * refout=false
 * xorout=0x00
 * check=0xf4
 * residue=0x00
 * name="CRC-8"
 */

#define CRC8_INIT (0x00)

static const uint8_t crc8_table[256] =
{
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
	0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
	0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
	0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
	0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
	0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
	0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
	0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
	0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
	0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
	0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
	0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
	0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
	0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
	0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
	0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};

#elif (CRC8_USED_POLY == CRC8_MAXIM)

/* width=8 
 * poly=0x31 
 * init=0x00 
 * refin=true 
 * refout=true 
 * xorout=0x00 
 * check=0xa1
 * residue=0x00 
 * name="CRC-8/MAXIM" 
 */

#define CRC8_INIT (0x00)

static const uint8_t crc8_table[256] =
{
	0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 
	0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 
	0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62, 
	0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 
	0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 
	0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a, 
	0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 
	0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 
	0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd, 
	0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50, 
	0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 
	0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 
	0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b, 
	0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 
	0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8, 
	0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
};

#elif (CRC8_USED_POLY == CRC8_SAE_J1850)

/* width=8
 * poly=0x1d
 * init=0xff
 * refin=false
 * refout=false
 * xorout=0xff
 * check=0x4b
 * residue=0xc4
 * name="CRC-8/SAE-J1850"
 */

#define CRC8_INIT (0xff)

static const uint8_t crc8_table[256] =
{
	0x3b, 0x26, 0x01, 0x1c, 0x4f, 0x52, 0x75, 0x68, 0xd3, 0xce, 0xe9, 0xf4, 0xa7, 0xba, 0x9d, 0x80, 
	0xf6, 0xeb, 0xcc, 0xd1, 0x82, 0x9f, 0xb8, 0xa5, 0x1e, 0x03, 0x24, 0x39, 0x6a, 0x77, 0x50, 0x4d, 
	0xbc, 0xa1, 0x86, 0x9b, 0xc8, 0xd5, 0xf2, 0xef, 0x54, 0x49, 0x6e, 0x73, 0x20, 0x3d, 0x1a, 0x07, 
	0x71, 0x6c, 0x4b, 0x56, 0x05, 0x18, 0x3f, 0x22, 0x99, 0x84, 0xa3, 0xbe, 0xed, 0xf0, 0xd7, 0xca, 
	0x28, 0x35, 0x12, 0x0f, 0x5c, 0x41, 0x66, 0x7b, 0xc0, 0xdd, 0xfa, 0xe7, 0xb4, 0xa9, 0x8e, 0x93, 
	0xe5, 0xf8, 0xdf, 0xc2, 0x91, 0x8c, 0xab, 0xb6, 0x0d, 0x10, 0x37, 0x2a, 0x79, 0x64, 0x43, 0x5e, 
	0xaf, 0xb2, 0x95, 0x88, 0xdb, 0xc6, 0xe1, 0xfc, 0x47, 0x5a, 0x7d, 0x60, 0x33, 0x2e, 0x09, 0x14, 
	0x62, 0x7f, 0x58, 0x45, 0x16, 0x0b, 0x2c, 0x31, 0x8a, 0x97, 0xb0, 0xad, 0xfe, 0xe3, 0xc4, 0xd9, 
	0x1d, 0x00, 0x27, 0x3a, 0x69, 0x74, 0x53, 0x4e, 0xf5, 0xe8, 0xcf, 0xd2, 0x81, 0x9c, 0xbb, 0xa6, 
	0xd0, 0xcd, 0xea, 0xf7, 0xa4, 0xb9, 0x9e, 0x83, 0x38, 0x25, 0x02, 0x1f, 0x4c, 0x51, 0x76, 0x6b, 
	0x9a, 0x87, 0xa0, 0xbd, 0xee, 0xf3, 0xd4, 0xc9, 0x72, 0x6f, 0x48, 0x55, 0x06, 0x1b, 0x3c, 0x21, 
	0x57, 0x4a, 0x6d, 0x70, 0x23, 0x3e, 0x19, 0x04, 0xbf, 0xa2, 0x85, 0x98, 0xcb, 0xd6, 0xf1, 0xec, 
	0x0e, 0x13, 0x34, 0x29, 0x7a, 0x67, 0x40, 0x5d, 0xe6, 0xfb, 0xdc, 0xc1, 0x92, 0x8f, 0xa8, 0xb5, 
	0xc3, 0xde, 0xf9, 0xe4, 0xb7, 0xaa, 0x8d, 0x90, 0x2b, 0x36, 0x11, 0x0c, 0x5f, 0x42, 0x65, 0x78, 
	0x89, 0x94, 0xb3, 0xae, 0xfd, 0xe0, 0xc7, 0xda, 0x61, 0x7c, 0x5b, 0x46, 0x15, 0x08, 0x2f, 0x32, 
	0x44, 0x59, 0x7e, 0x63, 0x30, 0x2d, 0x0a, 0x17, 0xac, 0xb1, 0x96, 0x8b, 0xd8, 0xc5, 0xe2, 0xff
};

#elif (CRC8_USED_POLY == CRC8_AUTOSAR)

/* width=8
 * poly=0x2f
 * init=0xff
 * refin=false
 * refout=false
 * xorout=0xff
 * check=0xdf
 * residue=0x42
 * name="CRC-8/AUTOSAR"
 */

#define CRC8_INIT (0xff)

static const uint8_t crc8_table[256] =
{
	0xbd, 0x92, 0xe3, 0xcc, 0x01, 0x2e, 0x5f, 0x70, 0xea, 0xc5, 0xb4, 0x9b, 0x56, 0x79, 0x08, 0x27, 
	0x13, 0x3c, 0x4d, 0x62, 0xaf, 0x80, 0xf1, 0xde, 0x44, 0x6b, 0x1a, 0x35, 0xf8, 0xd7, 0xa6, 0x89, 
	0xce, 0xe1, 0x90, 0xbf, 0x72, 0x5d, 0x2c, 0x03, 0x99, 0xb6, 0xc7, 0xe8, 0x25, 0x0a, 0x7b, 0x54, 
	0x60, 0x4f, 0x3e, 0x11, 0xdc, 0xf3, 0x82, 0xad, 0x37, 0x18, 0x69, 0x46, 0x8b, 0xa4, 0xd5, 0xfa, 
	0x5b, 0x74, 0x05, 0x2a, 0xe7, 0xc8, 0xb9, 0x96, 0x0c, 0x23, 0x52, 0x7d, 0xb0, 0x9f, 0xee, 0xc1, 
	0xf5, 0xda, 0xab, 0x84, 0x49, 0x66, 0x17, 0x38, 0xa2, 0x8d, 0xfc, 0xd3, 0x1e, 0x31, 0x40, 0x6f, 
	0x28, 0x07, 0x76, 0x59, 0x94, 0xbb, 0xca, 0xe5, 0x7f, 0x50, 0x21, 0x0e, 0xc3, 0xec, 0x9d, 0xb2, 
	0x86, 0xa9, 0xd8, 0xf7, 0x3a, 0x15, 0x64, 0x4b, 0xd1, 0xfe, 0x8f, 0xa0, 0x6d, 0x42, 0x33, 0x1c, 
	0x5e, 0x71, 0x00, 0x2f, 0xe2, 0xcd, 0xbc, 0x93, 0x09, 0x26, 0x57, 0x78, 0xb5, 0x9a, 0xeb, 0xc4, 
	0xf0, 0xdf, 0xae, 0x81, 0x4c, 0x63, 0x12, 0x3d, 0xa7, 0x88, 0xf9, 0xd6, 0x1b, 0x34, 0x45, 0x6a, 
	0x2d, 0x02, 0x73, 0x5c, 0x91, 0xbe, 0xcf, 0xe0, 0x7a, 0x55, 0x24, 0x0b, 0xc6, 0xe9, 0x98, 0xb7, 
	0x83, 0xac, 0xdd, 0xf2, 0x3f, 0x10, 0x61, 0x4e, 0xd4, 0xfb, 0x8a, 0xa5, 0x68, 0x47, 0x36, 0x19, 
	0xb8, 0x97, 0xe6, 0xc9, 0x04, 0x2b, 0x5a, 0x75, 0xef, 0xc0, 0xb1, 0x9e, 0x53, 0x7c, 0x0d, 0x22, 
	0x16, 0x39, 0x48, 0x67, 0xaa, 0x85, 0xf4, 0xdb, 0x41, 0x6e, 0x1f, 0x30, 0xfd, 0xd2, 0xa3, 0x8c, 
	0xcb, 0xe4, 0x95, 0xba, 0x77, 0x58, 0x29, 0x06, 0x9c, 0xb3, 0xc2, 0xed, 0x20, 0x0f, 0x7e, 0x51, 
	0x65, 0x4a, 0x3b, 0x14, 0xd9, 0xf6, 0x87, 0xa8, 0x32, 0x1d, 0x6c, 0x43, 0x8e, 0xa1, 0xd0, 0xff
};

#elif (CRC8_USED_POLY == CRC8_CDMA2000)

/* width=8
 * poly=0x9b
 * init=0xff
 * refin=false
 * refout=false
 * xorout=0x00
 * check=0xda
 * residue=0x00
 * name="CRC-8/CDMA2000"
 */

#define CRC8_INIT (0xff)

static const uint8_t crc8_table[256] =
{
	0x00, 0x9b, 0xad, 0x36, 0xc1, 0x5a, 0x6c, 0xf7, 0x19, 0x82, 0xb4, 0x2f, 0xd8, 0x43, 0x75, 0xee, 
	0x32, 0xa9, 0x9f, 0x04, 0xf3, 0x68, 0x5e, 0xc5, 0x2b, 0xb0, 0x86, 0x1d, 0xea, 0x71, 0x47, 0xdc, 
	0x64, 0xff, 0xc9, 0x52, 0xa5, 0x3e, 0x08, 0x93, 0x7d, 0xe6, 0xd0, 0x4b, 0xbc, 0x27, 0x11, 0x8a, 
	0x56, 0xcd, 0xfb, 0x60, 0x97, 0x0c, 0x3a, 0xa1, 0x4f, 0xd4, 0xe2, 0x79, 0x8e, 0x15, 0x23, 0xb8, 
	0xc8, 0x53, 0x65, 0xfe, 0x09, 0x92, 0xa4, 0x3f, 0xd1, 0x4a, 0x7c, 0xe7, 0x10, 0x8b, 0xbd, 0x26, 
	0xfa, 0x61, 0x57, 0xcc, 0x3b, 0xa0, 0x96, 0x0d, 0xe3, 0x78, 0x4e, 0xd5, 0x22, 0xb9, 0x8f, 0x14, 
	0xac, 0x37, 0x01, 0x9a, 0x6d, 0xf6, 0xc0, 0x5b, 0xb5, 0x2e, 0x18, 0x83, 0x74, 0xef, 0xd9, 0x42, 
	0x9e, 0x05, 0x33, 0xa8, 0x5f, 0xc4, 0xf2, 0x69, 0x87, 0x1c, 0x2a, 0xb1, 0x46, 0xdd, 0xeb, 0x70, 
	0x0b, 0x90, 0xa6, 0x3d, 0xca, 0x51, 0x67, 0xfc, 0x12, 0x89, 0xbf, 0x24, 0xd3, 0x48, 0x7e, 0xe5, 
	0x39, 0xa2, 0x94, 0x0f, 0xf8, 0x63, 0x55, 0xce, 0x20, 0xbb, 0x8d, 0x16, 0xe1, 0x7a, 0x4c, 0xd7, 
	0x6f, 0xf4, 0xc2, 0x59, 0xae, 0x35, 0x03, 0x98, 0x76, 0xed, 0xdb, 0x40, 0xb7, 0x2c, 0x1a, 0x81, 
	0x5d, 0xc6, 0xf0, 0x6b, 0x9c, 0x07, 0x31, 0xaa, 0x44, 0xdf, 0xe9, 0x72, 0x85, 0x1e, 0x28, 0xb3, 
	0xc3, 0x58, 0x6e, 0xf5, 0x02, 0x99, 0xaf, 0x34, 0xda, 0x41, 0x77, 0xec, 0x1b, 0x80, 0xb6, 0x2d, 
	0xf1, 0x6a, 0x5c, 0xc7, 0x30, 0xab, 0x9d, 0x06, 0xe8, 0x73, 0x45, 0xde, 0x29, 0xb2, 0x84, 0x1f, 
	0xa7, 0x3c, 0x0a, 0x91, 0x66, 0xfd, 0xcb, 0x50, 0xbe, 0x25, 0x13, 0x88, 0x7f, 0xe4, 0xd2, 0x49, 
	0x95, 0x0e, 0x38, 0xa3, 0x54, 0xcf, 0xf9, 0x62, 0x8c, 0x17, 0x21, 0xba, 0x4d, 0xd6, 0xe0, 0x7b
};

#else
#error Please pick a valid CRC polynomial
#endif
/*
uint8_t crc8(uint8_t crc, const uint8_t *data, uint32_t len)
{
  while (len--) {
    crc = crc8_table[crc ^ *data++];
  }

  return crc;
}

uint8_t crc8_block(const uint8_t *data, uint32_t len)
{
  uint8_t crc = CRC8_INIT;

  while (len--) {
    crc = crc8_table[crc ^ *data++];
  }

  return crc;
}
*/

// C++

Crc8::Crc8()
{
	crc = CRC8_INIT;
}
	
void Crc8::PushByte(const uint8_t byte)
{
	crc = crc8_table[crc ^ byte];
}

uint8_t Crc8::GetCrc()
{
	return crc;
}

uint8_t Crc8::GetBlockCrc(const uint8_t data[], size_t len)
{
	uint8_t crc = CRC8_INIT;

	while (len--)
	{
		crc = crc8_table[crc ^ *data++];
	}

	return crc;
}

bool Crc8::CheckBlockCrc(const uint8_t data[], size_t len)
{
    uint8_t actualCrc = data[len - 1]; // Last byte
    uint8_t calculatedCrc = GetBlockCrc(data, len - 1); // Exclude last byte

    return (actualCrc == calculatedCrc);
}
